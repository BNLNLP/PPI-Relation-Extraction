#
# paired T test & Wilcoxon_signed_rank_test
#
# ref: https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/

'''
import numpy as np
import math

N = 5
d1 = [80, 82, 85, 78, 85]
d2 = [81, 81, 86, 80, 88]

diff = np.subtract(d1, d2)
m = np.mean(diff)
std = math.sqrt(sum([(x-m)**2 for x in diff])/(N-1))
t = (math.sqrt(N)*m)/std
print(diff)
print(m)
print(std)
print(np.std(diff, ddof=1))
print(t)
'''



from scipy import stats

#d1 = [0.8, 0.82, 0.85, 0.78, 0.85]
#d2 = [0.81, 0.81, 0.86, 0.80, 0.88]

#d1 = [0.8991, 0.8967, 0.7608, 0.6694, 0.8405, 0.6706, 0.8051, 0.8682, 0.8760, 0.8058]
#d2 = [0.9085, 0.8216, 0.8034, 0.6892, 0.9091, 0.9601, 0.8988, 0.8255, 0.8182, 0.8684]

# ppi_EM_entity_start_incl_negative_annotation
d1 = [0.7899, 0.7980, 0.8476, 0.8717, 0.8605, 0.8169, 0.8421, 0.7788, 0.8726, 0.7796]
d2 = [0.7701, 0.8213, 0.9024, 0.8731, 0.9051, 0.8795, 0.8681, 0.8405, 0.8619, 0.7810]

# LLL STL EM vs. MTL EM + BioC
d1 = [0.9196, 0.9086, 0.8846, 0.6771, 0.7931, 0.7855, 0.8938, 0.8639, 1.0000, 0.7569]
d2 = [0.9196, 0.8385, 0.8643, 0.8108, 0.8955, 0.7932, 0.8476, 0.9543, 1.0000, 0.7833]

# HPRD50 STL EM vs MTL mention pooling + BioC
d1 = [0.8502, 0.7810, 0.8841, 0.7429, 0.8639, 0.9601, 0.8519, 0.7822, 0.6901, 0.7793]
d2 = [0.9085, 0.8216, 0.8034, 0.6892, 0.9091, 0.9601, 0.8988, 0.8255, 0.8182, 0.8684]

# ppi em stl vs. mtl incl_only_AImed_HPRD50_IEPA_negative
d1 = [0.8678, 0.8763, 0.8716, 0.8745, 0.9045, 0.8694, 0.8834, 0.8584, 0.8729, 0.8707]
d2 = [0.8889, 0.8841, 0.8673, 0.8837, 0.9133, 0.9022, 0.8874, 0.8653, 0.8736, 0.8575]

# ppi em stl vs. mtl incl_only_AImed_ikb_HPRD50_IEPA_negative
#d1 = [0.8049, 0.8538, 0.8654, 0.8802, 0.8368, 0.9022, 0.7891, 0.8504, 0.8581, 0.8446]
#d2 = [0.8153, 0.8790, 0.8801, 0.8746, 0.8316, 0.9004, 0.8614, 0.8504, 0.8711, 0.8378]

# ppi em stl vs. mtl incl all negative - weighted macro F1
#d1 = [0.7701, 0.8213, 0.9024, 0.8731, 0.9051, 0.8795, 0.8681, 0.8405, 0.8619, 0.7810]
#d2 = [0.7873, 0.8375, 0.8908, 0.8731, 0.8848, 0.8780, 0.8656, 0.8274, 0.8634, 0.8395]

# ppi em stl vs. mtl incl all negative - micro F1
#d1 = [0.7656, 0.8245, 0.9016, 0.8721, 0.9044, 0.8792, 0.8670, 0.8366, 0.8616, 0.7810]
#d2 = [0.7839, 0.8410, 0.8899, 0.8721, 0.8835, 0.8777, 0.8657, 0.8224, 0.8631, 0.8396]

# ppi em stl vs. mtl incl all negative - ver 3
#d1 = [0.8305, 0.8925, 0.8252, 0.8375, 0.8745, 0.8723, 0.8259, 0.7814, 0.8591, 0.8710]
#d2 = [0.8439, 0.8756, 0.8315, 0.8361, 0.8622, 0.8796, 0.8312, 0.8071, 0.8909, 0.8627]

# ppi em stl vs. mtl incl all negative - ver 4
#d1 = [0.8341, 0.8766, 0.7950, 0.8439, 0.9054, 0.8606, 0.8500, 0.8164, 0.8674, 0.8448]
#d2 = [0.8326, 0.8285, 0.8448, 0.8608, 0.8952, 0.8838, 0.8471, 0.8490, 0.8780, 0.8446]

# ppi em stl vs. mtl incl all negative - ver 5
#d1 = [0.7610, 0.8828, 0.8748, 0.8469, 0.8657, 0.9060, 0.8348, 0.8024, 0.8606, 0.8247]
#d2 = [0.7481, 0.8735, 0.9058, 0.8875, 0.8532, 0.8926, 0.8561, 0.8416, 0.8346, 0.8235]

# ppi em stl vs. mtl incl all negative - ver 7
d1 = [0.7330, 0.9115, 0.8638, 0.8460, 0.8136, 0.9023, 0.7699, 0.8408, 0.8740, 0.8570]
d2 = [0.7786, 0.9280, 0.8580, 0.8538, 0.8098, 0.9079, 0.7901, 0.8513, 0.9079, 0.8570]

# ppi em stl vs. mtl incl all negative - ver 6 (2 GPUs)
d1 = [0.8436, 0.8814, 0.8568, 0.8671, 0.8132, 0.8307, 0.7370, 0.8716, 0.8933, 0.8459]
#d2 = [0.8740, 0.8658, 0.8901, 0.8596, 0.8396, 0.8794, 0.7537, 0.8615, 0.9141, 0.8316]
d2 = [0.8629, 0.8752, 0.8900, 0.8501, 0.8496, 0.8456, 0.7089, 0.8607, 0.8777, 0.8449]

# ppi em stl vs. mtl incl all negative - ver 12 (2 GPUs)
d1 = [0.8232, 0.8432, 0.8964, 0.8086, 0.9059, 0.9046, 0.8619, 0.8901, 0.8660, 0.7378]
d2 = [0.8234, 0.8457, 0.8310, 0.8122, 0.8957, 0.8856, 0.8523, 0.8645, 0.8847, 0.7495]

# ppi em stl vs. mtl incl all negative - ver 15 (2 GPUs)
d1 = [0.8638, 0.8244, 0.8118, 0.8670, 0.8971, 0.8325, 0.8167, 0.8514, 0.8441, 0.8123]
d2 = [0.8911, 0.8422, 0.8250, 0.8720, 0.8918, 0.8329, 0.8578, 0.8552, 0.8361, 0.8787]

# ppi em stl vs. mtl incl all negative - ver 16 (2 GPUs)
d1 = [0.8410, 0.8646, 0.8815, 0.7901, 0.8343, 0.8732, 0.8931, 0.8831, 0.7466, 0.8478]
d2 = [0.8675, 0.8601, 0.8812, 0.7999, 0.8555, 0.9187, 0.9118, 0.8798, 0.7905, 0.8230]

# ppi em stl vs. mtl incl all negative - ver 19 (2 GPUs)
d1 = [0.8771, 0.8825, 0.8686, 0.8660, 0.8894, 0.7778, 0.8429, 0.8792, 0.8938, 0.8546]
d2 = [0.8620, 0.8499, 0.8652, 0.8527, 0.8767, 0.7134, 0.7974, 0.8867, 0.8978, 0.8602]

# ppi em stl vs. mtl incl all negative - ver 17 (2 GPUs)
d1 = [0.8745, 0.8171, 0.8596, 0.8101, 0.8827, 0.8124, 0.8670, 0.8279, 0.8093, 0.8532]
d2 = [0.8707, 0.8925, 0.8558, 0.8462, 0.8715, 0.8399, 0.8887, 0.8390, 0.9007, 0.8738]



#88.99/90.94	85.85/88.09	80.92/81.86	81.14/82.88	81.30/84.83
#89.02/91.05	86.19/88	78.15/82.2	81.76/83.12	81.30/86.68
# f-scores of original data between STL and MTL in BioBERT
#d1 = [90.94, 88.09, 81.86, 82.88, 84.83]
#d2 = [91.05, 88, 82.2, 83.12, 86.68]

#d1 = [90.94, 87.58, 82.48, 82.88, 84.83]
#d2 = [91.05, 87.85, 82.83, 83.12, 86.68]

# f-scores of original data between STL and MTL in BioBERT using all f-scores.
'''
d1 = [9031, 9467, 9266, 8995, 9085, 9157, 8936, 8696, 9179, 9131, 
	  8675, 9044, 9070, 8884, 8906, 8791, 8597, 8423, 8897, 8799, 
	  8502, 7810, 8841, 7429, 8639, 9601, 8519, 7822, 6901, 7793, 
	  8473, 8615, 8627, 7950, 8057, 8165, 7297, 8457, 8672, 8565,
	  9196, 9086, 8846, 6771, 7931, 7855, 8938, 8639, 10000, 7569
	]


d2 = [8951, 9432, 9329, 8965, 9067, 9214, 8841, 8927, 9198, 9126, 
	  8606, 9073, 9031, 8919, 8985, 8712, 8647, 8323, 8850, 8858, 
	  8521, 6909, 8841, 7823, 8412, 8800, 8519, 8469, 8079, 7833, 
	  7641, 8161, 9179, 8428, 8381, 7982, 7242, 8607, 9331, 8169,
	  9196, 8846, 8688, 8122, 8955, 8533, 8781, 8152, 10000, 7410  
	]
'''
'''
d1 = [9031, 9467, 9266, 8995, 9085, 9157, 8936, 8696, 9179, 9131, 
	  8932, 8629, 8553, 8310, 9208, 9097, 8518, 9003, 8729, 8597, 
	  8634, 8774, 7556, 7710, 8740, 8307, 8462, 7403, 8621, 8272, 
	  8473, 8615, 8627, 7950, 8057, 8165, 7297, 8457, 8672, 8565,
	  9196, 9086, 8846, 6771, 7931, 7855, 8938, 8639, 10000, 7569
	]


d2 = [8951, 9432, 9329, 8965, 9067, 9214, 8841, 8927, 9198, 9126, 
	  8824, 8707, 8606, 8396, 9132, 9101, 8753, 9036, 8725, 8570, 
	  8634, 8365, 7944, 7734, 9156, 9239, 8355, 7223, 8502, 7680, 
	  7641, 8161, 9179, 8428, 8381, 7982, 7242, 8607, 9331, 8169,
	  9196, 8846, 8688, 8122, 8955, 8533, 8781, 8152, 10000, 7410  
	]
'''	


#d1 = [9196, 9086, 8846, 6771, 7931, 7855, 8938, 8639, 10000, 7569]
#d2 = [9196, 8846, 8688, 8122, 8955, 8533, 8781, 8152, 10000, 7410]


print(stats.ttest_rel(d1,d2)) # paired T test


from scipy.stats import wilcoxon

#d1 = [1, 4, 5, 12, 6, 7, 7, 3, 0, 5]
#d2 = [1, 7, 6, 7, 3, 7, 10, 1, 0, 4]
#d1 = [0.111111111, 0.100318471, 0.13080895, 0.114678899, 0.087033748, 0.09765625, 0.11299435, 0.133027523, 0.124168514, 0.141924959]
#d2 = [0.132616487, 0.124203822, 0.127366609, 0.121559633, 0.095914742, 0.130859375, 0.116760829, 0.139908257, 0.124168514, 0.128874388]

stat, p = wilcoxon(d1, d2)

print('Statistics=%.3f, p=%.3f' % (stat, p))

# interpret
alpha = 0.05
if p > alpha:
	print('Same distribution (fail to reject H0)')
else:
	print('Different distribution (reject H0)')

'''
from scipy.stats import ranksums

d1 = [1*3247] + [0*583]
d2 = [1*3054] + [0*776]

r = ranksums(d1, d2)

print('ranksums:', r)
'''

'''
## McNemar test.
# Example of calculating the mcnemar test
from statsmodels.stats.contingency_tables import mcnemar
# define contingency table
table = [[4, 2],
		 [1, 3]]
# calculate mcnemar test
result = mcnemar(table, exact=True)
# summarize the finding
print('statistic=%.3f, p-value=%.3f' % (result.statistic, result.pvalue))
# interpret the p-value
alpha = 0.05
if result.pvalue > alpha:
	print('Same proportions of errors (fail to reject H0)')
else:
	print('Different proportions of errors (reject H0)')
'''
	
